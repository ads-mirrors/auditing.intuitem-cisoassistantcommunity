"""
Convert a YAML mapping into an Excel mapping
Version 1.2

Please note that this script doesn't replace "prepare_mapping.py".

Tested with v1 & v2 mappings.
"""

import yaml
import pandas as pd
import sys
import os
from openpyxl import load_workbook
from openpyxl.styles import Font

SCRIPT_VERSION = '1.2'

def extract_last_segment(urn: str) -> str:
    return urn.split(':')[-1] if urn else ''

def get_requirement_mappings(data: dict) -> tuple[list[dict], int]:
    objects = data.get("objects", {})

    # Version 1
    if "requirement_mapping_set" in objects:
        return objects["requirement_mapping_set"].get("requirement_mappings", []), -1

    # Version 2
    elif "requirement_mapping_sets" in objects:
        sets = objects["requirement_mapping_sets"]
        if isinstance(sets, list) and sets:
            while True:
                choice = input("ℹ️ Version 2 detected. Choose which mapping to export:\n"
                               "1 - Direct mapping (A to B)\n"
                               "2 - Revert mapping (B to A)\n"
                               "3 - Both mappings (A to B & B to A)\n"
                               "> Enter 1, 2 or 3: ").strip()
                if choice in {"1", "2", "3"}:
                    break
                print("❌ [ERROR] Invalid input. Please enter 1, 2 or 3")
            if choice == "3":
                return sets, 3
            else:
                idx = int(choice) - 1
                if idx < len(sets):
                    return sets[idx].get("requirement_mappings", []), idx
    return [], -1

def convert_yaml_to_excel(yaml_file: str, mappings_data, excel_file: str, mapping_index: int):
    rows_list = []

    def process_mapping(mappings):
        rows = []
        for item in mappings:
            row = {
                "source_requirement_urn": extract_last_segment(item.get("source_requirement_urn", "")),
                "target_requirement_urn": extract_last_segment(item.get("target_requirement_urn", "")),
                "relationship": item.get("relationship", ""),
                "rationale": item.get("rationale", ""),
                "strength_of_relationship": item.get("strength_of_relationship", ""),
                "annotation": item.get("annotation", "")
            }
            rows.append(row)
        return rows

    if mapping_index == 3:
        sheet_data = [
            ("mappings", process_mapping(mappings_data[0].get("requirement_mappings", []))),
            ("mappings_revert", process_mapping(mappings_data[1].get("requirement_mappings", [])))
        ]
    else:
        sheet_name = "mappings" if mapping_index in (-1, 0) else "mappings_revert"
        sheet_data = [
            (sheet_name, process_mapping(mappings_data))
        ]

    with pd.ExcelWriter(excel_file, engine='openpyxl') as writer:
        # Info sheet
        workbook = writer.book
        info_sheet = workbook.create_sheet(title="info", index=0)
        info_sheet["A1"] = "YAML to Excel Mapping Converter v" + SCRIPT_VERSION 
        info_sheet["A1"].font = Font(size=48, bold=True)
        info_sheet["A2"] = "Source file : " + os.path.basename(yaml_file)
        info_sheet["A2"].font = Font(size=15)
        info_sheet["A3"] = "Please note that this Excel file doesn't replace the one generated by prepare_mapping.py."
        info_sheet["A3"].font = Font(size=20, italic=True)

        # Mapping sheets
        for sheet_name, rows in sheet_data:
            df = pd.DataFrame(rows)[[
                "source_requirement_urn",
                "target_requirement_urn",
                "relationship",
                "rationale",
                "strength_of_relationship",
                "annotation"
            ]]
            df.to_excel(writer, sheet_name=sheet_name, index=False)

    print(f"✅ Conversion completed: \"{os.path.basename(excel_file)}\"")


if __name__ == "__main__":
    if len(sys.argv) < 2:
        print("Usage: python yaml_to_excel.py <yaml_file> [excel_file]")
        sys.exit(1)

    yaml_input = sys.argv[1]

    # Check if file exists
    if not os.path.isfile(yaml_input):
        print(f"❌ [ERROR] File not found -> {yaml_input}")
        sys.exit(1)

    # Load YAML file
    with open(yaml_input, 'r', encoding='utf-8') as f:
        data = yaml.safe_load(f)

    mappings_data, mapping_index = get_requirement_mappings(data)

    # Determine output filename
    if len(sys.argv) > 2:
        excel_output = sys.argv[2]
        if not excel_output.lower().endswith(".xlsx"):
            excel_output += ".xlsx"
    else:
        yaml_basename = os.path.splitext(os.path.basename(yaml_input))[0]
        suffix = ""
        if mapping_index == 1:
            suffix = "_revert"
        elif mapping_index == 3:
            suffix = "_both"
        excel_output = os.path.join(os.getcwd(), f"conv_{yaml_basename}{suffix}.xlsx")

    convert_yaml_to_excel(yaml_input, mappings_data, excel_output, mapping_index)