"""
Mapping Expander v0.1

This script expands a source mapping table by matching partial target node IDs 
to full node IDs listed in a reference Excel file.

Functionality:
--------------
- Reads a source Excel file with a sheet (default: "mappings") containing two columns:
  'source_node_id' and 'target_node_id'.
- Reads a reference Excel file with a sheet (default: "target") containing a column 
  (default: "node_id") with full target node identifiers (e.g., A1.2.3).
- For each row in the source table, the script looks up all reference node IDs that 
  begin with the value of 'target_node_id' (e.g., A1.2).
- It generates a new mapping table associating the original 'source_node_id' 
  with each matching full 'target_node_id'.

Output:
-------
- Creates a new Excel file with:
  1. A first sheet named "info" summarizing the input files and context.
  2. A second sheet (default: "mappings") containing the expanded mapping table.
- All cells in the output mapping table are formatted as text to preserve node formatting.

Note:
-----
This script does not replace or replicate the behavior of prepare_mapping.py.
It only serves to expand partial node references to full target nodes using a reference structure.

Configuration:
--------------
You can customize the source sheet name, reference sheet name, and reference column name 
by editing the configuration variables at the top of the script.
"""



import pandas as pd
from openpyxl import Workbook
from openpyxl.styles import Font, numbers
from openpyxl.utils.dataframe import dataframe_to_rows
import os

SCRIPT_VERSION = '0.1'

# === Configuration variables ===
source_file = "part_mapping_adobe-ccf-v5_to_soc2.xlsx"
reference_file = "mapping-adobe-ccf-v5-to-soc2-2017-rev-2022.xlsx"
destination_file = "destination.xlsx"

source_sheet_name = "mappings"           # Sheet name in the source file
reference_sheet_name = "target"          # Sheet name in the reference file
reference_column_name = "node_id"        # Column name in the reference file to match

# === Read Excel files ===
df_source = pd.read_excel(source_file, sheet_name=source_sheet_name, dtype=str)
df_reference = pd.read_excel(reference_file, sheet_name=reference_sheet_name, dtype=str)
node_id_list = df_reference[reference_column_name].dropna().tolist()

# === Prepare new rows for output ===
new_rows = []
warnings_list = []

for _, row in df_source.iterrows():
    source_id = row["source_node_id"]
    target_prefix = row["target_node_id"]

    matches = [node_id for node_id in node_id_list if node_id.startswith(target_prefix)]
    
    # Show a warning if no match was found
    if not matches:
        warning_msg = f"No match found in reference for target_node_id \"{target_prefix}\" (source_node_id: \"{source_id}\")"
        print(f"‚ö†Ô∏è  [WARNING] {warning_msg}")
        warnings_list.append({
            "source_node_id": source_id,
            "target_node_id": target_prefix,
            "message": warning_msg
        })

    for full_node_id in matches:
        new_rows.append({
            "source_node_id": source_id,
            "target_node_id": full_node_id
        })

df_result = pd.DataFrame(new_rows)

# === Create Excel workbook ===
wb = Workbook()

# === Sheet: info (first sheet) ===
ws_info = wb.active
ws_info.title = "info"

# Extract file names without path
source_filename = os.path.basename(source_file)
reference_filename = os.path.basename(reference_file)

# Add info rows with styling
rows_info = [
    {"text": f"Mapping Expander v{SCRIPT_VERSION}", "font": Font(size=48, bold=True)},
    {"text": f"Source file : {source_filename}", "font": Font(size=15)},
    {"text": f"Source sheet : {source_sheet_name}", "font": Font(size=15)},
    {"text": f"Reference file : {reference_filename}", "font": Font(size=15)},
    {"text": f"Reference sheet: {reference_sheet_name} | Ref Column : {reference_column_name}", "font": Font(size=15)},
    {"text": "Please note that this Excel file doesn't replace the one generated by prepare_mapping.py.",
     "font": Font(size=20, italic=True)},
]

for i, row in enumerate(rows_info, start=1):
    cell = ws_info.cell(row=i, column=1, value=row["text"])
    cell.font = row["font"]

# === Sheet: mappings ===
ws_mappings = wb.create_sheet(title=source_sheet_name)

# Write headers
ws_mappings.append(list(df_result.columns))

# Write data rows
for row in dataframe_to_rows(df_result, index=False, header=False):
    ws_mappings.append(row)

# Force text format for all cells
for column in ws_mappings.columns:
    for cell in column:
        cell.number_format = numbers.FORMAT_TEXT


# === Sheet: warnings (if any) ===
if warnings_list:
    ws_warn = wb.create_sheet(title="warnings")
    # Write headers
    ws_warn.append(["source_node_id", "target_node_id", "message"])
    # Write warning rows
    for warn in warnings_list:
        ws_warn.append([warn["source_node_id"], warn["target_node_id"], warn["message"]])


# Save workbook
wb.save(destination_file)

# === Confirmation message ===
print("‚úÖ Conversion completed successfully.")
print(f"‚û° Source sheet: '{source_sheet_name}'")
print(f"‚û° Reference sheet: '{reference_sheet_name}', column: '{reference_column_name}'")
print(f"üìÅ Output file: {destination_file}")