"""
Merge 2 mappings together
Version 1.1

In order to do that, you must set an Excel A -> B mapping (File 1) and a B -> C mapping (File 2) in the script's input parameters.
This will produce an Excel A -> C mapping (File 3) on output.

Select the tab containing the mapping table in "File 1" by modifying "A_TO_B_MAPPING_TAB_NAME".
Select the tab containing the mapping table in "File 2" by modifying "B_TO_C_MAPPING_TAB_NAME".

Please note that you can't use the output Excel file as is to convert it to a YAML file.

Tested with v1 & v2 mappings.
"""


A_TO_B_MAPPING_TAB_NAME = "mappings_content"
B_TO_C_MAPPING_TAB_NAME = "mappings"


import pandas as pd
import sys
import os
from openpyxl import load_workbook
from openpyxl.styles import Font

SCRIPT_VERSION = '1.1'

# Validate arguments
if len(sys.argv) < 3 or len(sys.argv) > 4:
    print("Usage: python merge_mappings.py <file1.xlsx> <file2.xlsx> [output.xlsx]")
    sys.exit(1)

file1_path = sys.argv[1]
file2_path = sys.argv[2]
output_path = sys.argv[3] if len(sys.argv) == 4 else "merged_output.xlsx"

# Check if the required sheets exist before loading them
try:
    sheet_names1 = pd.ExcelFile(file1_path).sheet_names
    if A_TO_B_MAPPING_TAB_NAME not in sheet_names1:
        raise ValueError(f"❌ Sheet {A_TO_B_MAPPING_TAB_NAME} not found in \"{file1_path}\"")

    sheet_names2 = pd.ExcelFile(file2_path).sheet_names
    if B_TO_C_MAPPING_TAB_NAME not in sheet_names2:
        raise ValueError(f"❌ Sheet {B_TO_C_MAPPING_TAB_NAME} not found in \"{file2_path}\"")
except Exception as e:
    print(str(e))
    sys.exit(1)


# Load and clean file 1 (A -> B)
df1 = pd.read_excel(file1_path, sheet_name=A_TO_B_MAPPING_TAB_NAME)
df1.columns = df1.columns.str.strip()

# Load and clean file 2 (B -> C)
df2 = pd.read_excel(file2_path, sheet_name=B_TO_C_MAPPING_TAB_NAME)
df2.columns = df2.columns.str.strip()

# Merge A -> B -> C
merged_df = df1.merge(
    df2,
    left_on="target_node_id",
    right_on="source_node_id",
    how="left"
)

# Check for unmatched B nodes
unmatched = merged_df[merged_df["target_node_id_y"].isna()]
if not unmatched.empty:
    unmatched_ids = unmatched["target_node_id_x"].dropna().unique()
    print("⚠️ Warning: The following target_node_id values from file 1 had no match in file 2:")
    for val in unmatched_ids:
        print(f"   - {val}")

# Ensure relationship and rationale columns exist
for col in ["relationship_y", "rationale_y"]:
    if col not in merged_df.columns:
        merged_df[col] = ""

# Select and rename final columns
merged_df = merged_df[[
    "source_node_id_x",      # A
    "target_node_id_y",      # C
    "relationship_y",
    "rationale_y"
]]
merged_df.columns = [
    "source_node_id",        # A
    "target_node_id",        # C
    "relationship",
    "rationale"
]

# Drop rows with no match to C
merged_df = merged_df.dropna(subset=["target_node_id"])

# Fill blanks in optional fields
merged_df["relationship"] = merged_df["relationship"].fillna("")
merged_df["rationale"] = merged_df["rationale"].fillna("")

# Export to Excel
merged_df.to_excel(output_path, sheet_name="merged", index=False)


wb = load_workbook(output_path)

# Insert a new sheet at the front named "info"
if "info" in wb.sheetnames:
    ws_info = wb["info"]
else:
    ws_info = wb.create_sheet("info", 0)  # Insert at position 0 (first sheet)

# Clear sheet in case of existing content
ws_info.delete_cols(1, ws_info.max_column)
ws_info.delete_rows(1, ws_info.max_row)

# Write texts with formatting
ws_info["A1"] = "Mapping Merger v" + SCRIPT_VERSION
ws_info["A1"].font = Font(size=48, bold=True)

source_file_name = os.path.basename(file1_path)
ws_info["A2"] = "File A -> B : " + source_file_name
ws_info["A2"].font = Font(size=20)

source_file_name = os.path.basename(file2_path)
ws_info["A3"] = "File B -> C : " + source_file_name
ws_info["A3"].font = Font(size=20)

ws_info["A4"] = "Please note that this Excel file doesn't replace the one generated by prepare_mapping.py."
ws_info["A4"].font = Font(size=20)

# Save the modified workbook
wb.save(output_path)

print(f"✅ Output written to \"{output_path}\"")